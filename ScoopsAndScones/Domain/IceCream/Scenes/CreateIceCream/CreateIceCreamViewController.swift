//
//  CreateIceCreamViewController.swift
//  ScoopsAndScones
//
//  Created by jhKim on 2022/08/09.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import SnapKit
import Then

protocol CreateIceCreamDisplayLogic: class {
    func displaySomething(viewModel: CreateIceCream.Something.ViewModel)
}

class CreateIceCreamViewController: UIViewController, CreateIceCreamDisplayLogic {
    
    var interactor: CreateIceCreamBusinessLogic?
    var router: (NSObjectProtocol & CreateIceCreamRoutingLogic & CreateIceCreamDataPassing)?
    
    private lazy var label = UILabel().then {
        $0.text = "CreateIceCreamViewController"
    }
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
      super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
      setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = CreateIceCreamInteractor()
        let presenter = CreateIceCreamPresenter()
        let router = CreateIceCreamRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        setupLayout()
        doSomething()
    }
    
    // MARK: Do something
    
    //lazy var nameLabel = UILabel()
    
    func doSomething() {
        let request = CreateIceCream.Something.Request()
        interactor?.doSomething(request: request)
    }
    
    func displaySomething(viewModel: CreateIceCream.Something.ViewModel) {
        //nameLabel.text = viewModel.name
    }
    
    private func setupLayout() {
        view.backgroundColor = .white
        view.addSubview(label)
        
        label.snp.makeConstraints {
            $0.center.equalToSuperview()
        }
        
    }
}
